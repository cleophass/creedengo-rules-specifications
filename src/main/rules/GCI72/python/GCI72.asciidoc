Executing SQL queries in loop induced unnecessary calculation by the CPU, RAM usage and network transfer.

== Non compliant Code Example

[source,python]
----
def foo():
    ...
    results = []
    for id in range(20):
      results.append(cursor.execute("SELECT name FROM users where id = ?", (id)).fetchone()) # Noncompliant {{Avoid performing SQL queries within a loop}}
    ...
----

== Compliant Solution

[source,python]
----
def foo():
    ...
    ids = range(20)
    results = cursor.execute("SELECT name FROM users where id IN ({0})".format(', '.join("?" * len(ids))), ids).fetchmany() # Compliant
    ...

----
== Relevance Analysis

The following results were obtained through local experiments.

=== Configuration
* SQLite Database: 5-6 GB
* Processor: Intel(R) Core(TM) Ultra 5 135U, 2100 MHz, 12 cores, 14 logical processors
* RAM: 16 GB
* CO2 Emissions Measurement: Using CodeCarbon

=== Context

This practice can significantly degrade performance, especially when processing large datasets or making repetitive database calls. By opting for batch processing instead of executing queries in loops, developers can improve overall system efficiency and reduce the carbon footprint of their applications.

=== Test Execution

The performance analysis was conducted by executing 1000 queries for both the non-compliant and compliant solutions. For the non-compliant solution, each query was executed individually within a loop. For the compliant solution, a batch query with the same 1000 queries was executed.

=== Impact Analysis

[cols="1,1,1", options="header"]
|===
|Metric |Compliant Solution |Non-compliant Solution
|Execution Time (seconds) |0.13391780853271484 |124.80779719352722
|Carbon Emissions (kg CO2 eq) |6.0358009465562945e-06 |9.932707807019985e-05
|Car Equivalent (mm)* |27 |414
|===

*Converter: https://impactco2.fr/outils/comparateur

=== Conclusion

The performance analysis conducted in this study only measures the execution time and carbon emissions of the Python code executing the queries. It does not include emissions due to database processing. 

The results show that the compliant solution, which avoids SQL queries in loops, is more efficient in terms of execution time and carbon emissions. By adopting batch query processing and avoiding queries in loops, developers can improve application performance and reduce their carbon footprint. Developers are encouraged to use batch query processing whenever possible to improve application performance.

=== References
:hide-uri-scheme: 
https://blogs.oracle.com/sql/post/avoid-writing-sql-inside-loops
